---
substitutions:
  name: esp32-s3-box-3
  friendly_name: ESP32 S3 Box 3
  loading_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/loading_V3.png
  idle_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/idle_V3.png
  listening_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/listening_V3.png
  thinking_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/thinking_V3.png
  replying_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/replying_V3.png
  error_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/error_V3.png
  mute_illustration_file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/mute_V3.png
  
  esp32_s3_software_version: "2.1-v09-TSW"

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"

  # These unique characters have been extracted from every test file of every language available on https://github.com/home-assistant/intents (14 March 2024)
  allowed_characters: " !#%'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？"

  ####################################################################
  #### change the micro wake word to be used on the line below   #####
  ####      options are okay_nabu, hey_jarvis, alexa             #####
  ####################################################################
  micro_wake_word_model: okay_nabu
  ####################################################################

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  project:
    name: repman.voice-assistant
    version: "2.1"
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - script.execute: set_volume
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      CONFIG_ESP32_S3_BOX_3_BOARD: "y"
    components:
      - name: esp32_s3_box_3_board
        source: github://jesserockz/esp32-s3-box-3-board@main
        refresh: 0s

psram:
  mode: octal
  speed: 80MHz

external_components:
  - source:
      type: git
      url: https://github.com/gnumpi/esphome_audio
      ref: dev-next
    components: [ adf_pipeline, i2s_audio ]

api:
  encryption:
    key: !secret api_esp32_secret
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    password: !secret ota_esp32_secret

logger:
  hardware_uart: USB_SERIAL_JTAG

dashboard_import:
  package_import_url: github://Rep-Hueman/ESPHome/esp32-s3-box3-ext-audio-touch.yaml@main

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
  on_connect:
    - script.execute: draw_display
    - delay: 5s  # Gives time for improv results to be transmitted
    - ble.disable:
  on_disconnect:
    - script.execute: draw_display
    - ble.enable:

 # manual_ip:
 #   static_ip: 192.168.1.185
 #   gateway: 192.168.1.254
 #   subnet: 255.255.255.0

improv_serial:

esp32_improv:
  authorizer: none

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset
  - platform: restart
    name: "Restart"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      inverted: true
    name: "Mute"
    disabled_by_default: true
    entity_category: diagnostic

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: Top Left Button
    disabled_by_default: true
    entity_category: diagnostic
    on_multi_click:
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

# touchscreen sensor
  - platform: gt911
    index: 0
    name: "Home"
    disabled_by_default: true
    entity_category: diagnostic
    id: home_button
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: mute
              then:
                - if:
                    condition: voice_assistant.is_running
                    then:
                      - voice_assistant.stop:
                    else:
                      - voice_assistant.start:
              else:
                  - if:
                      condition:
                        lambda: return !id(init_in_progress);
                      then:
                        - if:
                            condition:
                              lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                            then:
                              - voice_assistant.stop
                              - delay: 1s
                              - voice_assistant.start_continuous
                        - if:
                            condition:
                              lambda: return id(wake_word_engine_location).state == "On device";
                            then:
                              - micro_wake_word.stop
                              - delay: 500ms
                              - voice_assistant.start:
                              - wait_until:
                                  not:
                                    voice_assistant.is_running:
  
  - platform: touchscreen
    name: Touch centrum
    disabled_by_default: true
    x_min: 100
    x_max: 230
    y_min: 125
    y_max: 195
    on_press:
      then:        
        - switch.toggle: mute

output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms


# Disable the speaker on_tts_stream_start|end both require the speaker component so i removed those as well and just went with on_tts_start|end
# speaker:
#   - platform: esp_adf
#     id: box_speaker

i2c:
  - id: bus_a
    sda: GPIO8
    scl: GPIO18
    frequency: 100kHz
    scan: True
  
  - id: bus_b
    sda: GPIO41
    scl: GPIO40
    frequency: 100kHz

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2
    access_mode: duplex

adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_shared
    i2s_dout_pin: GPIO15
    adf_alc: false
    dac:
      i2c_id: bus_a
      model: es8311
      address: 0x18
      enable_pin: GPIO46

    sample_rate: 16000
    bits_per_sample: 16bit
    fixed_settings: true

  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    i2s_audio_id: i2s_shared
    i2s_din_pin: GPIO16
    pdm: false
    adc:
      i2c_id: bus_a
      model: es7210
      address: 0x40

    sample_rate: 16000
    bits_per_sample: 16bit
    fixed_settings: true

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: s3-box_media_player
    internal: false
    keep_pipeline_alive: true
    announcement_audio:
      sample_rate: 24000
      bits_per_sample: 16
      num_channels: 1
    pipeline:
      - self
      - resampler
      - adf_i2s_out

    on_idle:
      - if:
          condition:
            - lambda: return (id(replying_to_query) == true);
          then:
            - if:
                condition:
                  - switch.is_on: continued_conversation
                then:
                  - delay: 1s
                  - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
                  - script.execute: stt_timeout_to_idle
                else:
                  - if:
                      condition:
                        switch.is_on: mute
                      then:
                        - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
                      else:
                        - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
                  - script.execute: draw_display
            - lambda: id(replying_to_query) = false;
          else:
                  - if:
                      condition:
                        switch.is_on: mute
                      then:
                        - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
                      else:
                        - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
                  - script.execute: draw_display

    on_play:
      - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
      - script.execute: draw_display

    on_announcement:
      - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
      - script.execute: draw_display

microphone:
  - platform: adf_pipeline
    id: box_mic
    keep_pipeline_alive: true
    pipeline:
      - adf_i2s_in
      - resampler
      - self

micro_wake_word:
  model: ${micro_wake_word_model}
  on_wake_word_detected:
    - media_player.pause:
    - if:
        condition:
          switch.is_on: continued_conversation
        then:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.start_continuous: # wake_word: !lambda return wake_word; not yet supported for continuous
        else:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.start:
              wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: adf_media_player
  use_wake_word: true
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - if:
        condition:
          - switch.is_off: continued_conversation
        then:
          - text_sensor.template.publish:
              id: text_request
              state: "..."
          - text_sensor.template.publish:
              id: text_response
              state: "..."
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - text_sensor.template.publish:
              id: text_request
              state: ""
          - text_sensor.template.publish:
              id: text_response
              state: ""
          - script.execute: stt_timeout_to_idle
          - lambda: id(va).set_use_wake_word(false);

  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - script.execute: stt_timeout_to_idle
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - if:
        condition:
          and:
            # When using extended openai conversation, add the following to the prompt
            # If you feel the user has finished and doesn't want to talk anymore, just respond with the exact phrase "Ok, bye."
            - lambda: return (x == "Ok, bye.");
            - switch.is_on: continued_conversation
        then:
          - script.execute: return_to_idle  
  on_tts_end:
    - if:
        condition:
          - switch.is_on: external_speaker
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: media_player.sonos_e01
                media_content_id: !lambda 'return x;'
                media_content_type: music
                announce: "true"
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - lambda: id(replying_to_query) = true;
          - script.execute: stt_timeout_to_idle
  # on_tts_stream_start:
  # on_tts_stream_end:
  on_end:
    - if:
        condition:
          and:
            - switch.is_off: mute
            - lambda: return id(wake_word_engine_location).state == "On device";
            - switch.is_off: continued_conversation
        then:
          - script.execute: return_to_idle
  on_error:
    - if:
        condition:
          and:
            - lambda: return !id(init_in_progress);
            - lambda: return !(code == "stt-no-text-recognized");
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - script.stop: stt_timeout_to_idle
          - script.execute: draw_display
  on_client_connected:
    - script.execute: return_to_idle
    - lambda: id(init_in_progress) = false;
    - script.execute: draw_display
  on_client_disconnected:
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "In Home Assistant";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.stop:
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.stop
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display

script:

  - id: set_volume
    then:
      - if:
          condition:
            switch.is_on: internal_speaker
          then:            
            - media_player.volume_set: 100%
          else:
            - media_player.volume_set: 0%

  - id: stt_timeout_to_idle
    mode: restart     # restart the timer if called before timeout
    then:
      if:
        condition:
          switch.is_on: continued_conversation
        then:
          - delay: !lambda "return id(continued_timeout).state * 1000;"
          - if:
              condition:
                lambda: return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
              then:
                - wait_until:
                    condition:
                      lambda: return !(id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
                      # normally this would complete and move to next phase with on_tts_stream_end,
                      # but sometimes this is missed so put a time limit on the wait
                    timeout: 5s
                - delay: 1s  # Give time for the stream to end and the phase to be switched back to listening and this timeout to be reset
                - script.execute: stt_timeout_to_idle
          - script.execute: return_to_idle

  - id: return_to_idle
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - script.stop: stt_timeout_to_idle
            - if:
                condition:
                  voice_assistant.is_running
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - wait_until:
                      condition:
                        not:
                          voice_assistant.is_running
                      timeout: 5s
            - if:
                condition:
                  not:
                    micro_wake_word.is_running
                then:
                  - micro_wake_word.start
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - if:
                condition:
                  micro_wake_word.is_running
                then:
                  - micro_wake_word.stop
                  - wait_until:
                      condition:
                        not:
                          micro_wake_word.is_running
                      timeout: 5s
            - wait_until:
                condition:
                  not:
                    voice_assistant.is_running
                timeout: 5s
            - lambda: id(va).set_use_wake_word(true);
            - if:
                condition:
                  - not:
                      voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(va).set_use_wake_word(false);
            - if:
                condition:
                  - voice_assistant.is_running
                then:
                  - voice_assistant.stop
            - if:
                condition:
                  - micro_wake_word.is_running
                then:
                  - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: draw_display

  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(s3_box_lcd).show_page(muted_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd

switch:
  - platform: template
    name: Display conversation
    icon: "mdi:text-box-outline"
    id: display_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_off:
      - script.execute: draw_display
    on_turn_on:
      - script.execute: draw_display

  - platform: template
    name: Speaker External
    icon: "mdi:speaker"
    id: external_speaker
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config

  - platform: template
    name: Speaker Internal
    icon: "mdi:cellphone-sound"
    id: internal_speaker
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:            
            - media_player.volume_set: 100%
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - media_player.volume_set: 0%

  - platform: template
    name: Disable wake word
    icon: "mdi:microphone-off"
    id: mute
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:            
            - script.execute: return_to_idle
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(va).set_use_wake_word(false);
            - if:
                condition:
                  - voice_assistant.is_running
                then:
                  - voice_assistant.stop
            - if:
                condition:
                  - micro_wake_word.is_running
                then:
                  - micro_wake_word.stop
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};                  
            - script.execute: draw_display

  - platform: template
    name: Continued conversation
    icon: "mdi:page-next-outline"
    id: continued_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - script.execute: return_to_idle
    on_turn_on:
      - script.execute: return_to_idle

number:
  - platform: template
    entity_category: config
    name: Continued timeout
    id: continued_timeout
    icon: mdi:clock
    optimistic: true
    restore_value: true
    initial_value: 8
    min_value: 1
    step: 1
    max_value: 10
    unit_of_measurement: s
    mode: slider

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - wait_until:
          lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - if:
                condition:
                  switch.is_off: mute
                then:
                  - lambda: id(va).set_use_wake_word(true);
                  - voice_assistant.start_continuous:
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: replying_to_query
    type: bool
    restore_value: false
    initial_value: "false"


image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${mute_illustration_file}
    id: casita_mute
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/error-no-wifi_V3.png
    id: error_no_wifi
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: https://github.com/Rep-Hueman/ESPHome/raw/main/images/s3box_ico_v3/error-no-ha_V3.png
    id: error_no_ha
    resize: 320x240
    type: RGB24
    use_transparency: true

font:
  - file:
      type: gfonts
      family: Figtree
      weight: 300
      italic: true
    glyphs: ${allowed_characters}
    id: font_request
    size: 15
  - file:
      type: gfonts
      family: Figtree
      weight: 300
    glyphs: ${allowed_characters}
    id: font_response
    size: 15

sensor:
  # ESP Chip-Temperatur
  - platform: internal_temperature
    name: "Internal Temperature"
    entity_category: "diagnostic"

  # Device Uptime Information
  - platform: uptime
    name: Uptime
    id: uptime_sensor
 
text_sensor:
  # WiFi info
  - platform: wifi_info
    ip_address:
      name: "IP address"
      icon: "mdi:network-outline"
    ssid:
      name: "Connected SSID"
    bssid:
      name: "Connected BSSID"
    mac_address:
      name: Mac Wifi Address
  # ESPHome information
  - platform: version
    id: text_sensor_version
    name: "ESPHome Version"
  # Esp32-s3 Information
  - platform: template
    id: text_sensor_esp32_s3_software_version
    name: "Software Version"
    update_interval: 5h
    lambda: |-
      return {"${esp32_s3_software_version}"};
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}

spi:
  clk_pin: 7
  mosi_pin: 6

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_idle), ImageAlign::CENTER);
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
          if (id(display_conversation).state) {
            it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );
            it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
            it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
          }
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          if (id(display_conversation).state) {
            it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );
            it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
            it.filled_rectangle(20 , 190 , 280 , 30 , Color::WHITE );
            it.rectangle(20 , 190 , 280 , 30 , Color::BLACK );
            it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
            it.printf(30, 195, id(font_response), Color::BLACK, "%s", id(text_response).state.c_str());
          }
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_mute), ImageAlign::CENTER);

touchscreen:
  - platform: gt911
    i2c_id: bus_a
    interrupt_pin: GPIO3
    update_interval: 20ms
    on_touch:
      - logger.log:
          format: Touch %d at (%d, %d)
          args: [touch.id, touch.x, touch.y]
